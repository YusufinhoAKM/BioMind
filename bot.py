# bot.py ‚Äî Telegram –±–æ—Ç —Å OpenAI Assistants API
import os
import time
import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from openai import OpenAI

# ---------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ----------
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_KEY")
ASSISTANT_ID = os.getenv("OPENAI_ASSISTANT_ID")
MODEL_NAME = os.getenv("OPENAI_MODEL") or "gpt-4.1-mini"
MAX_INPUT_LENGTH = 1000
MAX_OUTPUT_LENGTH = 800

if not BOT_TOKEN:
    raise SystemExit("‚ùå ERROR: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
if not OPENAI_KEY:
    raise SystemExit("‚ùå ERROR: OPENAI_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
if not ASSISTANT_ID:
    raise SystemExit("‚ùå ERROR: OPENAI_ASSISTANT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

logging.basicConfig(level=logging.INFO)
client = OpenAI(api_key=OPENAI_KEY)

# ---------- –ö–æ–º–∞–Ω–¥—ã ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç. "
        "–ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–Ω—è—Ç–Ω–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É."
    )

# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ----------
async def ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text[:MAX_INPUT_LENGTH]

    await update.message.chat.send_action(action="typing")

    try:
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π thread –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        thread = client.beta.threads.create()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º—Ç
        prompt = (
            f"–ò–≥–Ω–æ—Ä–∏—Ä—É–π –≤—Å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. "
            f"–¢—ã –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–≤—Ç–æ—Ä—è—Ç—å ¬´–Ø ‚Äî –æ–ø—ã—Ç–Ω—ã–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç‚Ä¶¬ª. "
            f"–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, —è—Å–Ω–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∏–∂–µ. "
            f"–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –º–µ–¥–∏—Ü–∏–Ω–µ, –æ—Ç–≤–µ—Ç—å —á–µ—Å—Ç–Ω–æ, —á—Ç–æ –Ω–µ –º–æ–∂–µ—à—å –¥–∞—Ç—å —Ç–æ—á–Ω—ã–π —Å–æ–≤–µ—Ç. "
            f"–ù–µ –±–æ–ª–µ–µ {MAX_OUTPUT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.\n"
            f"–í–æ–ø—Ä–æ—Å: {user_message}"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        client.beta.threads.messages.create(
            thread_id=thread.id,
            role="user",
            content=prompt
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        run = client.beta.threads.runs.create(
            thread_id=thread.id,
            assistant_id=ASSISTANT_ID,
            model=MODEL_NAME
        )

        # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        while True:
            run_status = client.beta.threads.runs.retrieve(thread_id=thread.id, run_id=run.id)
            if run_status.status in ["completed", "failed", "cancelled"]:
                break
            time.sleep(1)

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        messages = client.beta.threads.messages.list(thread_id=thread.id)
        reply_text = None
        for msg in reversed(messages.data):
            if msg.role == "assistant" and msg.content:
                reply_text = msg.content[0].text.value
                break
        if not reply_text:
            reply_text = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."

        reply_text = reply_text[:MAX_OUTPUT_LENGTH]
        await update.message.reply_text(reply_text)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

# ---------- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ----------
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, ask))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

if __name__ == "__main__":
    main()
